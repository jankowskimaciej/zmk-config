/*
  * Copyright (c) 2020 The ZMK Contributors
  *
  * SPDX-License-Identifier: MIT
  */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        code_block: code_block {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp LS(ENTER) &kp LS(RET) &kp GRAVE &kp GRAVE &kp GRAVE &kp UP_ARROW>;
            label = "CODE_BLOCK";
        };

        left_arrow: left_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp MINUS>;
            label = "LEFT_ARROW";
        };

        right_arrow: right_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "RIGHT_ARROW";
        };

        screenshot: screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(NUMBER_4))>;
            label = "SCREENSHOT";
        };

        left_desk: left_desk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT)>;
            label = "LEFT_DESK";
        };

        right_desk: right_desk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT)>;
            label = "RIGHT_DESK";
        };

        up_desk: up_desk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(UP_ARROW)>;
            label = "UP_DESK";
        };

        down_desk: down_desk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(DOWN)>;
            label = "DOWN_DESK";
        };

        prev_word: prev_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT)>;
            label = "PREV_WORD";
        };

        next_word: next_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT)>;
            label = "NEXT_WORD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp TAB         &kp Q  &kp W               &kp E                &kp R           &kp T          &kp Y      &kp U       &kp I            &kp O        &kp P          &kp BACKSPACE
&gresc          &kp A  &mt LEFT_CONTROL S  &mt LGUI D           &mt LEFT_ALT F  &kp G          &kp H      &mt RALT J  &mt RIGHT_GUI K  &mt RCTRL L  &kp SEMICOLON  &kp SQT
&kp LEFT_SHIFT  &kp Z  &kp X               &kp C                &kp V           &kp B          &kp N      &kp M       &kp COMMA        &kp PERIOD   &kp SLASH      &mt RSHFT ENTER
                                           &lt 0 RS(BACKSLASH)  &mo 1           &lt 2 SPACE    &lt 1 TAB  &mo 0       &mo 0
            >;
        };

        layer1 {
            bindings = <
&code_block  &kp F1     &kp F2        &kp F3        &kp F4             &kp F5              &kp F6       &kp F7        &kp F8    &kp F9    &kp F10    &kp BSPC
&kp GRAVE    &kp N1     &kp N2        &kp N3        &kp N4             &kp N5              &kp N6       &kp N7        &kp N8    &kp N9    &kp N0     &kp MINUS
&trans       &kp EQUAL  &kp LS(LPAR)  &kp LS(RPAR)  &kp MINUS          &kp BSLH            &left_arrow  &right_arrow  &kp LBKT  &kp RBKT  &kp EQUAL  &trans
                                      &kp EQUAL     &kp RIGHT_BRACKET  &kp LEFT_BRACKET    &none        &none         &none
            >;
        };

        layer_4 {
            bindings = <
&trans    &trans     &next_word  &kp C_PREVIOUS  &kp K_PLAY_PAUSE  &kp C_NEXT    &kp C_VOLUME_UP  &kp K_VOLUME_DOWN  &trans     &trans     &trans         &kp DELETE
&kp HOME  &kp LSHFT  &kp LCTRL   &kp LGUI        &kp LALT          &trans        &kp LEFT         &kp DOWN           &kp UP     &kp RIGHT  &kp LC(PG_UP)  &kp LG(EQUAL)
&trans    &trans     &trans      &trans          &trans            &prev_word    &trans           &kp PG_DN          &kp PG_UP  &trans     &kp LC(PG_DN)  &kp LG(MINUS)
                                 &trans          &trans            &trans        &trans           &trans             &trans
            >;
        };
    };
};
